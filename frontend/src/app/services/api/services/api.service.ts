/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Device } from '../models/device';
import { deviceDeviceIdGet } from '../fn/operations/device-device-id-get';
import { DeviceDeviceIdGet$Params } from '../fn/operations/device-device-id-get';
import { deviceDeviceIdHistoryHumidityPost } from '../fn/operations/device-device-id-history-humidity-post';
import { DeviceDeviceIdHistoryHumidityPost$Params } from '../fn/operations/device-device-id-history-humidity-post';
import { deviceDeviceIdHistoryTemperaturePost } from '../fn/operations/device-device-id-history-temperature-post';
import { DeviceDeviceIdHistoryTemperaturePost$Params } from '../fn/operations/device-device-id-history-temperature-post';
import { deviceDeviceIdModePost } from '../fn/operations/device-device-id-mode-post';
import { DeviceDeviceIdModePost$Params } from '../fn/operations/device-device-id-mode-post';
import { deviceDeviceIdTargetComfortPost } from '../fn/operations/device-device-id-target-comfort-post';
import { DeviceDeviceIdTargetComfortPost$Params } from '../fn/operations/device-device-id-target-comfort-post';
import { deviceDeviceIdTargetEcoPost } from '../fn/operations/device-device-id-target-eco-post';
import { DeviceDeviceIdTargetEcoPost$Params } from '../fn/operations/device-device-id-target-eco-post';
import { DeviceInfoStripped } from '../models/device-info-stripped';
import { devicesGet } from '../fn/operations/devices-get';
import { DevicesGet$Params } from '../fn/operations/devices-get';
import { DeviceStripped } from '../models/device-stripped';
import { HumidityHistory } from '../models/humidity-history';
import { rawDevicesGet } from '../fn/operations/raw-devices-get';
import { RawDevicesGet$Params } from '../fn/operations/raw-devices-get';
import { TemperatureHistory } from '../models/temperature-history';

@Injectable({ providedIn: 'root' })
export class ApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `rawDevicesGet()` */
  static readonly RawDevicesGetPath = '/raw/devices';

  /**
   * Retrieves the raw Heazty list of devices associated to your account.
   *
   * Retrieves the full, unaltered list of devices linked to your account. Another endpoint is available with more concise and readable data.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rawDevicesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  rawDevicesGet$Response(params?: RawDevicesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Device>>> {
    return rawDevicesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves the raw Heazty list of devices associated to your account.
   *
   * Retrieves the full, unaltered list of devices linked to your account. Another endpoint is available with more concise and readable data.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rawDevicesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rawDevicesGet(params?: RawDevicesGet$Params, context?: HttpContext): Observable<Array<Device>> {
    return this.rawDevicesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Device>>): Array<Device> => r.body)
    );
  }

  /** Path part for operation `devicesGet()` */
  static readonly DevicesGetPath = '/devices';

  /**
   * Retrieves the stripped and readable list of devices associated to your account.
   *
   * Retrieves the stripped and readable list of devices linked to your account. Another endpoint is available to retrieve unaltered Heatzy data.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `devicesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  devicesGet$Response(params?: DevicesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DeviceStripped>>> {
    return devicesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves the stripped and readable list of devices associated to your account.
   *
   * Retrieves the stripped and readable list of devices linked to your account. Another endpoint is available to retrieve unaltered Heatzy data.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `devicesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  devicesGet(params?: DevicesGet$Params, context?: HttpContext): Observable<Array<DeviceStripped>> {
    return this.devicesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DeviceStripped>>): Array<DeviceStripped> => r.body)
    );
  }

  /** Path part for operation `deviceDeviceIdGet()` */
  static readonly DeviceDeviceIdGetPath = '/device/{deviceId}';

  /**
   * Retrieves the stripped and readable information relative to a specific device.
   *
   * Retrieves the stripped and readable information relative to a specific device, using the device's did (device ID). Another endpoint is available to retrieve raw data. The heating schedule is expressed in readable hours in this payload.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deviceDeviceIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  deviceDeviceIdGet$Response(params: DeviceDeviceIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<DeviceInfoStripped>> {
    return deviceDeviceIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves the stripped and readable information relative to a specific device.
   *
   * Retrieves the stripped and readable information relative to a specific device, using the device's did (device ID). Another endpoint is available to retrieve raw data. The heating schedule is expressed in readable hours in this payload.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deviceDeviceIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deviceDeviceIdGet(params: DeviceDeviceIdGet$Params, context?: HttpContext): Observable<DeviceInfoStripped> {
    return this.deviceDeviceIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<DeviceInfoStripped>): DeviceInfoStripped => r.body)
    );
  }

  /** Path part for operation `deviceDeviceIdHistoryTemperaturePost()` */
  static readonly DeviceDeviceIdHistoryTemperaturePostPath = '/device/{deviceId}/history/temperature';

  /**
   * Retrieves the temperature history of a device in a requested interval.
   *
   * Retrieves the temperature history of a device in a requested interval. The start and end values should be specified as timestamps (seconds).
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deviceDeviceIdHistoryTemperaturePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deviceDeviceIdHistoryTemperaturePost$Response(params: DeviceDeviceIdHistoryTemperaturePost$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TemperatureHistory>>> {
    return deviceDeviceIdHistoryTemperaturePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves the temperature history of a device in a requested interval.
   *
   * Retrieves the temperature history of a device in a requested interval. The start and end values should be specified as timestamps (seconds).
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deviceDeviceIdHistoryTemperaturePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deviceDeviceIdHistoryTemperaturePost(params: DeviceDeviceIdHistoryTemperaturePost$Params, context?: HttpContext): Observable<Array<TemperatureHistory>> {
    return this.deviceDeviceIdHistoryTemperaturePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TemperatureHistory>>): Array<TemperatureHistory> => r.body)
    );
  }

  /** Path part for operation `deviceDeviceIdHistoryHumidityPost()` */
  static readonly DeviceDeviceIdHistoryHumidityPostPath = '/device/{deviceId}/history/humidity';

  /**
   * Retrieves the humidity history of a device in a requested interval.
   *
   * Retrieves the humidity history of a device in a requested interval. The start and end values should be specified as timestamps (seconds).
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deviceDeviceIdHistoryHumidityPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deviceDeviceIdHistoryHumidityPost$Response(params: DeviceDeviceIdHistoryHumidityPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<HumidityHistory>>> {
    return deviceDeviceIdHistoryHumidityPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves the humidity history of a device in a requested interval.
   *
   * Retrieves the humidity history of a device in a requested interval. The start and end values should be specified as timestamps (seconds).
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deviceDeviceIdHistoryHumidityPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deviceDeviceIdHistoryHumidityPost(params: DeviceDeviceIdHistoryHumidityPost$Params, context?: HttpContext): Observable<Array<HumidityHistory>> {
    return this.deviceDeviceIdHistoryHumidityPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<HumidityHistory>>): Array<HumidityHistory> => r.body)
    );
  }

  /** Path part for operation `deviceDeviceIdModePost()` */
  static readonly DeviceDeviceIdModePostPath = '/device/{deviceId}/mode';

  /**
   * Changes the current heating mode of a specific device.
   *
   * Changes the current heating mode of a specific device.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deviceDeviceIdModePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deviceDeviceIdModePost$Response(params: DeviceDeviceIdModePost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deviceDeviceIdModePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Changes the current heating mode of a specific device.
   *
   * Changes the current heating mode of a specific device.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deviceDeviceIdModePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deviceDeviceIdModePost(params: DeviceDeviceIdModePost$Params, context?: HttpContext): Observable<void> {
    return this.deviceDeviceIdModePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deviceDeviceIdTargetComfortPost()` */
  static readonly DeviceDeviceIdTargetComfortPostPath = '/device/{deviceId}/target/comfort';

  /**
   * Changes the target comfort temperature of a specific device.
   *
   * Changes the target comfort temperature of a specific device.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deviceDeviceIdTargetComfortPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deviceDeviceIdTargetComfortPost$Response(params: DeviceDeviceIdTargetComfortPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deviceDeviceIdTargetComfortPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Changes the target comfort temperature of a specific device.
   *
   * Changes the target comfort temperature of a specific device.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deviceDeviceIdTargetComfortPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deviceDeviceIdTargetComfortPost(params: DeviceDeviceIdTargetComfortPost$Params, context?: HttpContext): Observable<void> {
    return this.deviceDeviceIdTargetComfortPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deviceDeviceIdTargetEcoPost()` */
  static readonly DeviceDeviceIdTargetEcoPostPath = '/device/{deviceId}/target/eco';

  /**
   * Changes the target eco temperature of a specific device.
   *
   * Changes the target eco temperature of a specific device.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deviceDeviceIdTargetEcoPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deviceDeviceIdTargetEcoPost$Response(params: DeviceDeviceIdTargetEcoPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deviceDeviceIdTargetEcoPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Changes the target eco temperature of a specific device.
   *
   * Changes the target eco temperature of a specific device.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deviceDeviceIdTargetEcoPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deviceDeviceIdTargetEcoPost(params: DeviceDeviceIdTargetEcoPost$Params, context?: HttpContext): Observable<void> {
    return this.deviceDeviceIdTargetEcoPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
